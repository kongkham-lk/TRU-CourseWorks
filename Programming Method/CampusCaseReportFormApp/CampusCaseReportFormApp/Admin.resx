<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        /mr5agAAAABJRU5ErkJggg==
</value>
  </data>
</root>